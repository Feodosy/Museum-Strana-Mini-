
Profsouysy_leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006c  0080006c  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dea  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b8  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
  8a:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <skvazhnost>:
uint8_t temp=1;                                                                                                         //для смены светодиодов


void skvazhnost() {                                                                             //функция для задания скважности подсветки
while(1){		  
		if (temp==1)  {if (n    < 255)   {if(flor < 150) flor+=1; if(roof < 130) roof+=1; _delay_us(6600); n++;}    //плавно гасится пол на 60% и потолок на 70%                                 
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	09 f5       	brne	.+66     	; 0xdc <skvazhnost+0x4a>
  9a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <n>
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	d1 f0       	breq	.+52     	; 0xd6 <skvazhnost+0x44>
  a2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
  a6:	86 39       	cpi	r24, 0x96	; 150
  a8:	18 f4       	brcc	.+6      	; 0xb0 <skvazhnost+0x1e>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
  b0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  b4:	82 38       	cpi	r24, 0x82	; 130
  b6:	18 f4       	brcc	.+6      	; 0xbe <skvazhnost+0x2c>
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e8       	ldi	r24, 0x8F	; 143
  c0:	93 e3       	ldi	r25, 0x33	; 51
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <skvazhnost+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <skvazhnost+0x36>
  c8:	00 00       	nop
  ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <n>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <n>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <skvazhnost+0x4a>
		else temp = 2;}                                                                                          //переход к следующему светодиоду
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==2)  {if (led1 >   0)   {led1 -= 1;  if(flor<255) flor+=1; if(roof<170) roof+=2; if((roof>=170) && (roof<255)) roof+=1; _delay_us(4000); }  //гасим плавно пол и потолок, зажигая первый светодод. P.S. два if для потолока используется для одновременного погашения потолка и пола
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	41 f5       	brne	.+80     	; 0x134 <skvazhnost+0xa2>
  e4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
  e8:	88 23       	and	r24, r24
  ea:	09 f1       	breq	.+66     	; 0x12e <skvazhnost+0x9c>
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <led1>
  f2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	19 f0       	breq	.+6      	; 0x100 <skvazhnost+0x6e>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
 100:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 104:	8a 3a       	cpi	r24, 0xAA	; 170
 106:	18 f4       	brcc	.+6      	; 0x10e <skvazhnost+0x7c>
 108:	8e 5f       	subi	r24, 0xFE	; 254
 10a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 10e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 112:	96 e5       	ldi	r25, 0x56	; 86
 114:	98 0f       	add	r25, r24
 116:	95 35       	cpi	r25, 0x55	; 85
 118:	18 f4       	brcc	.+6      	; 0x120 <skvazhnost+0x8e>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9f e1       	ldi	r25, 0x1F	; 31
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <skvazhnost+0x92>
 128:	00 c0       	rjmp	.+0      	; 0x12a <skvazhnost+0x98>
 12a:	00 00       	nop
 12c:	03 c0       	rjmp	.+6      	; 0x134 <skvazhnost+0xa2>
		else temp = 3; }                                                                         //переход к следующему светодиоду	                                           	
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==3)  {if (led1 < 255)   {led1 += 1;  if(led1>100) {led2 -=1; statDV -= 1;}_delay_us(4000);}       //далее постепенное зажигание и погашение 8 светодиодов внахлест                                                    
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	e9 f4       	brne	.+58     	; 0x176 <skvazhnost+0xe4>
 13c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	b1 f0       	breq	.+44     	; 0x170 <skvazhnost+0xde>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <led1>
 14a:	85 36       	cpi	r24, 0x65	; 101
 14c:	50 f0       	brcs	.+20     	; 0x162 <skvazhnost+0xd0>
 14e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 152:	81 50       	subi	r24, 0x01	; 1
 154:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 158:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <statDV>
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9f e1       	ldi	r25, 0x1F	; 31
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <skvazhnost+0xd4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <skvazhnost+0xda>
 16c:	00 00       	nop
 16e:	03 c0       	rjmp	.+6      	; 0x176 <skvazhnost+0xe4>
		else temp = 4;}                                                                          //        
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==4)  {if (led2 >   0)   {led2 -= 1; statDV -= 1; _delay_us(4000);}                               //                                                        
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	b1 f4       	brne	.+44     	; 0x1aa <skvazhnost+0x118>
 17e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 182:	88 23       	and	r24, r24
 184:	79 f0       	breq	.+30     	; 0x1a4 <skvazhnost+0x112>
 186:	81 50       	subi	r24, 0x01	; 1
 188:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 18c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 190:	81 50       	subi	r24, 0x01	; 1
 192:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <statDV>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9f e1       	ldi	r25, 0x1F	; 31
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <skvazhnost+0x108>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <skvazhnost+0x10e>
 1a0:	00 00       	nop
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <skvazhnost+0x118>
		else temp = 5;}                                                                         //
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==5)  {if (led2 < 255)   {led2 += 1;  if(led2>100) led3 -=1; _delay_us(3400);}       //
 1aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	85 30       	cpi	r24, 0x05	; 5
 1b0:	c1 f4       	brne	.+48     	; 0x1e2 <skvazhnost+0x150>
 1b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 1b6:	8f 3f       	cpi	r24, 0xFF	; 255
 1b8:	89 f0       	breq	.+34     	; 0x1dc <skvazhnost+0x14a>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 1c0:	85 36       	cpi	r24, 0x65	; 101
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <skvazhnost+0x13c>
 1c4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 1ce:	8f e8       	ldi	r24, 0x8F	; 143
 1d0:	9a e1       	ldi	r25, 0x1A	; 26
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <skvazhnost+0x140>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <skvazhnost+0x146>
 1d8:	00 00       	nop
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <skvazhnost+0x150>
		else temp = 6; }                                                                         // 
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==6)  {if (led3 >   0)   {led3 -= 1;  _delay_us(4000);}                               //
 1e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	86 30       	cpi	r24, 0x06	; 6
 1e8:	89 f4       	brne	.+34     	; 0x20c <skvazhnost+0x17a>
 1ea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 1ee:	88 23       	and	r24, r24
 1f0:	51 f0       	breq	.+20     	; 0x206 <skvazhnost+0x174>
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 1f8:	8f e3       	ldi	r24, 0x3F	; 63
 1fa:	9f e1       	ldi	r25, 0x1F	; 31
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <skvazhnost+0x16a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <skvazhnost+0x170>
 202:	00 00       	nop
 204:	03 c0       	rjmp	.+6      	; 0x20c <skvazhnost+0x17a>
		else temp = 7; }                                                                         //
 206:	87 e0       	ldi	r24, 0x07	; 7
 208:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==7)  {if (led3 < 255)   {led3 += 1; statDV += 1;   if(led3>100) led4 -=1; _delay_us(4000);}       //
 20c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 210:	87 30       	cpi	r24, 0x07	; 7
 212:	e9 f4       	brne	.+58     	; 0x24e <skvazhnost+0x1bc>
 214:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	b1 f0       	breq	.+44     	; 0x248 <skvazhnost+0x1b6>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 222:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <statDV>
 226:	9f 5f       	subi	r25, 0xFF	; 255
 228:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <statDV>
 22c:	85 36       	cpi	r24, 0x65	; 101
 22e:	28 f0       	brcs	.+10     	; 0x23a <skvazhnost+0x1a8>
 230:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 234:	81 50       	subi	r24, 0x01	; 1
 236:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9f e1       	ldi	r25, 0x1F	; 31
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <skvazhnost+0x1ac>
 242:	00 c0       	rjmp	.+0      	; 0x244 <skvazhnost+0x1b2>
 244:	00 00       	nop
 246:	03 c0       	rjmp	.+6      	; 0x24e <skvazhnost+0x1bc>
		else temp = 8; }                                                                         //
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==8)  {if (led4 >   0)   {led4 -= 1; _delay_us(4000);}                               //
 24e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	89 f4       	brne	.+34     	; 0x278 <skvazhnost+0x1e6>
 256:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 25a:	88 23       	and	r24, r24
 25c:	51 f0       	breq	.+20     	; 0x272 <skvazhnost+0x1e0>
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9f e1       	ldi	r25, 0x1F	; 31
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <skvazhnost+0x1d6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <skvazhnost+0x1dc>
 26e:	00 00       	nop
 270:	03 c0       	rjmp	.+6      	; 0x278 <skvazhnost+0x1e6>
		else temp = 9; }	                                                                     //
 272:	89 e0       	ldi	r24, 0x09	; 9
 274:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==9)  {if (led4 < 255)   {PORTC&=~(1<<7); led4 += 1;  if(led4>100) house -=1; _delay_us(5000);}       //
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	89 30       	cpi	r24, 0x09	; 9
 27e:	e9 f4       	brne	.+58     	; 0x2ba <skvazhnost+0x228>
 280:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 284:	8f 3f       	cpi	r24, 0xFF	; 255
 286:	b1 f0       	breq	.+44     	; 0x2b4 <skvazhnost+0x222>
 288:	85 b3       	in	r24, 0x15	; 21
 28a:	8f 77       	andi	r24, 0x7F	; 127
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 298:	85 36       	cpi	r24, 0x65	; 101
 29a:	28 f0       	brcs	.+10     	; 0x2a6 <skvazhnost+0x214>
 29c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	97 e2       	ldi	r25, 0x27	; 39
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <skvazhnost+0x218>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <skvazhnost+0x21e>
 2b0:	00 00       	nop
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <skvazhnost+0x228>
		else temp = 10; }                                                                        //
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==10) {if (house >   0)   {house -=1; _delay_us(5000);}                               // 
 2ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2be:	8a 30       	cpi	r24, 0x0A	; 10
 2c0:	89 f4       	brne	.+34     	; 0x2e4 <skvazhnost+0x252>
 2c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 2c6:	88 23       	and	r24, r24
 2c8:	51 f0       	breq	.+20     	; 0x2de <skvazhnost+0x24c>
 2ca:	81 50       	subi	r24, 0x01	; 1
 2cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 2d0:	8f e0       	ldi	r24, 0x0F	; 15
 2d2:	97 e2       	ldi	r25, 0x27	; 39
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <skvazhnost+0x242>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <skvazhnost+0x248>
 2da:	00 00       	nop
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <skvazhnost+0x252>
		else temp = 11;}                                                                         //
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==11) {if (house < 255)   {house +=1; if(house>100) flrDV -=1; _delay_us(5000);}      //
 2e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e8:	8b 30       	cpi	r24, 0x0B	; 11
 2ea:	c1 f4       	brne	.+48     	; 0x31c <skvazhnost+0x28a>
 2ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 2f0:	8f 3f       	cpi	r24, 0xFF	; 255
 2f2:	89 f0       	breq	.+34     	; 0x316 <skvazhnost+0x284>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 2fa:	85 36       	cpi	r24, 0x65	; 101
 2fc:	28 f0       	brcs	.+10     	; 0x308 <skvazhnost+0x276>
 2fe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flrDV>
 302:	81 50       	subi	r24, 0x01	; 1
 304:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flrDV>
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	97 e2       	ldi	r25, 0x27	; 39
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <skvazhnost+0x27a>
 310:	00 c0       	rjmp	.+0      	; 0x312 <skvazhnost+0x280>
 312:	00 00       	nop
 314:	03 c0       	rjmp	.+6      	; 0x31c <skvazhnost+0x28a>
		else temp = 12;}                                                                         //
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==12) {if (flrDV >   0)  {flrDV -= 1; _delay_us(5000);}                              //
 31c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 320:	8c 30       	cpi	r24, 0x0C	; 12
 322:	d1 f4       	brne	.+52     	; 0x358 <skvazhnost+0x2c6>
 324:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flrDV>
 328:	88 23       	and	r24, r24
 32a:	51 f0       	breq	.+20     	; 0x340 <skvazhnost+0x2ae>
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flrDV>
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	97 e2       	ldi	r25, 0x27	; 39
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <skvazhnost+0x2a4>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <skvazhnost+0x2aa>
 33c:	00 00       	nop
 33e:	0c c0       	rjmp	.+24     	; 0x358 <skvazhnost+0x2c6>
		else {temp = 13; _delay_ms(6000);}}                                           	
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	2b e7       	ldi	r18, 0x7B	; 123
 34a:	82 e9       	ldi	r24, 0x92	; 146
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <skvazhnost+0x2ba>
 354:	00 c0       	rjmp	.+0      	; 0x356 <skvazhnost+0x2c4>
 356:	00 00       	nop
	if (temp==13) {if (flrDV < 255)  {PORTC|=(1<<7);flrDV += 1;  if(flrDV>100) led5 -=1; _delay_us(4500);}     //
 358:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 35c:	8d 30       	cpi	r24, 0x0D	; 13
 35e:	e9 f4       	brne	.+58     	; 0x39a <skvazhnost+0x308>
 360:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flrDV>
 364:	8f 3f       	cpi	r24, 0xFF	; 255
 366:	b1 f0       	breq	.+44     	; 0x394 <skvazhnost+0x302>
 368:	85 b3       	in	r24, 0x15	; 21
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	85 bb       	out	0x15, r24	; 21
 36e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flrDV>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flrDV>
 378:	85 36       	cpi	r24, 0x65	; 101
 37a:	28 f0       	brcs	.+10     	; 0x386 <skvazhnost+0x2f4>
 37c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 380:	81 50       	subi	r24, 0x01	; 1
 382:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	87 e2       	ldi	r24, 0x27	; 39
 388:	93 e2       	ldi	r25, 0x23	; 35
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <skvazhnost+0x2f8>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <skvazhnost+0x2fe>
 390:	00 00       	nop
 392:	03 c0       	rjmp	.+6      	; 0x39a <skvazhnost+0x308>
		else temp = 14;}	                                                                     //
 394:	8e e0       	ldi	r24, 0x0E	; 14
 396:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==14) {if (led5 >   0)   {led5 -= 1; _delay_us(4000);}                               //
 39a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	8e 30       	cpi	r24, 0x0E	; 14
 3a0:	89 f4       	brne	.+34     	; 0x3c4 <skvazhnost+0x332>
 3a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 3a6:	88 23       	and	r24, r24
 3a8:	51 f0       	breq	.+20     	; 0x3be <skvazhnost+0x32c>
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
 3b2:	9f e1       	ldi	r25, 0x1F	; 31
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <skvazhnost+0x322>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <skvazhnost+0x328>
 3ba:	00 00       	nop
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <skvazhnost+0x332>
		else temp = 15;}    
 3be:	8f e0       	ldi	r24, 0x0F	; 15
 3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==15) {if (led5 < 255)   {led5 += 1;  if(led6>100) {led6 -=1; statDV -= 1;} _delay_us(4000);}       //
 3c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c8:	8f 30       	cpi	r24, 0x0F	; 15
 3ca:	e9 f4       	brne	.+58     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 3d0:	8f 3f       	cpi	r24, 0xFF	; 255
 3d2:	b1 f0       	breq	.+44     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
 3da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 3de:	85 36       	cpi	r24, 0x65	; 101
 3e0:	40 f0       	brcs	.+16     	; 0x3f2 <skvazhnost+0x360>
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
 3e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 3ec:	81 50       	subi	r24, 0x01	; 1
 3ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <statDV>
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	9f e1       	ldi	r25, 0x1F	; 31
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <skvazhnost+0x364>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <skvazhnost+0x36a>
 3fc:	00 00       	nop
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		else temp = 16;}	                                                                     //
 400:	80 e1       	ldi	r24, 0x10	; 16
 402:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==16) {if (led6 >   0)   {led6 -= 1;  statDV -= 1; _delay_us(4000);}                               //
 406:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 40a:	80 31       	cpi	r24, 0x10	; 16
 40c:	b1 f4       	brne	.+44     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 40e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 412:	88 23       	and	r24, r24
 414:	79 f0       	breq	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 416:	81 50       	subi	r24, 0x01	; 1
 418:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
 41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 420:	81 50       	subi	r24, 0x01	; 1
 422:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <statDV>
 426:	8f e3       	ldi	r24, 0x3F	; 63
 428:	9f e1       	ldi	r25, 0x1F	; 31
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	03 c0       	rjmp	.+6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		else temp = 17;}                                                                         //
 434:	81 e1       	ldi	r24, 0x11	; 17
 436:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==17) {if (led6 < 255)   {led6 += 1; statDV += 1; if(led7>100) led7 -=1; _delay_us(3400);}       //
 43a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43e:	81 31       	cpi	r24, 0x11	; 17
 440:	e9 f4       	brne	.+58     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 442:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 446:	8f 3f       	cpi	r24, 0xFF	; 255
 448:	b1 f0       	breq	.+44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
 450:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <statDV>
 45a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 45e:	85 36       	cpi	r24, 0x65	; 101
 460:	18 f0       	brcs	.+6      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 462:	81 50       	subi	r24, 0x01	; 1
 464:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 468:	8f e8       	ldi	r24, 0x8F	; 143
 46a:	9a e1       	ldi	r25, 0x1A	; 26
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		else temp = 18;}                                                                         //
 476:	82 e1       	ldi	r24, 0x12	; 18
 478:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==18) {if (led7 >   0)   {led7 -= 1; _delay_us(4000);}                               //
 47c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 480:	82 31       	cpi	r24, 0x12	; 18
 482:	89 f4       	brne	.+34     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 484:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 488:	88 23       	and	r24, r24
 48a:	51 f0       	breq	.+20     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 492:	8f e3       	ldi	r24, 0x3F	; 63
 494:	9f e1       	ldi	r25, 0x1F	; 31
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		else temp = 19;} 	     
 4a0:	83 e1       	ldi	r24, 0x13	; 19
 4a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==19) {if (led7 < 255)   {led7 += 1; if(led8>100) led8 -=1; _delay_us(4000);}      //
 4a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4aa:	83 31       	cpi	r24, 0x13	; 19
 4ac:	c1 f4       	brne	.+48     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4ae:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 4b2:	8f 3f       	cpi	r24, 0xFF	; 255
 4b4:	89 f0       	breq	.+34     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 4bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 4c0:	85 36       	cpi	r24, 0x65	; 101
 4c2:	18 f0       	brcs	.+6      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 4ca:	8f e3       	ldi	r24, 0x3F	; 63
 4cc:	9f e1       	ldi	r25, 0x1F	; 31
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
		else temp = 20;}                                                                         //
 4d8:	84 e1       	ldi	r24, 0x14	; 20
 4da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==20) {if (led8 >   0)   {led8 -= 1; _delay_us(4000);}                             //
 4de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e2:	84 31       	cpi	r24, 0x14	; 20
 4e4:	89 f4       	brne	.+34     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 4e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 4ea:	88 23       	and	r24, r24
 4ec:	51 f0       	breq	.+20     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4ee:	81 50       	subi	r24, 0x01	; 1
 4f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	9f e1       	ldi	r25, 0x1F	; 31
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fe:	00 00       	nop
 500:	03 c0       	rjmp	.+6      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		else temp = 21;}  	                                                                     //
 502:	85 e1       	ldi	r24, 0x15	; 21
 504:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==21) {if (led8 < 255)   {led8 += 1;  if((roof > 130) && (led8 > 125)) roof -=1; _delay_us(4000);}       //плавно зажигаем потолок на 70%
 508:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 50c:	85 31       	cpi	r24, 0x15	; 21
 50e:	d1 f4       	brne	.+52     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 510:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 514:	8f 3f       	cpi	r24, 0xFF	; 255
 516:	99 f0       	breq	.+38     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 518:	8f 5f       	subi	r24, 0xFF	; 255
 51a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 51e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 522:	93 38       	cpi	r25, 0x83	; 131
 524:	28 f0       	brcs	.+10     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 526:	8e 37       	cpi	r24, 0x7E	; 126
 528:	18 f0       	brcs	.+6      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__data_end>
 530:	8f e3       	ldi	r24, 0x3F	; 63
 532:	9f e1       	ldi	r25, 0x1F	; 31
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 53a:	00 00       	nop
 53c:	03 c0       	rjmp	.+6      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
		else temp = 22;}	                                                                     //
 53e:	86 e1       	ldi	r24, 0x16	; 22
 540:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==22) {if (flor >   0)   {flor -= 1;  if(roof>0) roof -=1; _delay_us(6600);}         //плавно зажигаем пол и потолок на 100%
 544:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 548:	86 31       	cpi	r24, 0x16	; 22
 54a:	09 f0       	breq	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 54c:	a2 cd       	rjmp	.-1212   	; 0x92 <skvazhnost>
 54e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
 552:	88 23       	and	r24, r24
 554:	89 f0       	breq	.+34     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 556:	81 50       	subi	r24, 0x01	; 1
 558:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
 55c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 560:	88 23       	and	r24, r24
 562:	19 f0       	breq	.+6      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 564:	81 50       	subi	r24, 0x01	; 1
 566:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 56a:	8f e8       	ldi	r24, 0x8F	; 143
 56c:	93 e3       	ldi	r25, 0x33	; 51
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 574:	00 00       	nop
 576:	8d cd       	rjmp	.-1254   	; 0x92 <skvazhnost>
		else {temp = 1; n=0; return;}}		                                                     //возвращаем параметры на исходные и заканчиваем функцию
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 57e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <n>
 582:	08 95       	ret

00000584 <initial_ports>:
		}
	}
	
void initial_ports() {
DDRA=0xFF;                     //подключаем порт A
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	8a bb       	out	0x1a, r24	; 26
PORTA=0;
 588:	1b ba       	out	0x1b, r1	; 27

DDRD=0xFF;                     //подключаем порт D
 58a:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<2) | (1<<4);
 58c:	82 b3       	in	r24, 0x12	; 18
 58e:	84 61       	ori	r24, 0x14	; 20
 590:	82 bb       	out	0x12, r24	; 18

DDRC&=~(1<<6);       DDRC|=(1<<7);                //подключаем порт С на кнопку b на мотор
 592:	84 b3       	in	r24, 0x14	; 20
 594:	8f 7b       	andi	r24, 0xBF	; 191
 596:	84 bb       	out	0x14, r24	; 20
 598:	84 b3       	in	r24, 0x14	; 20
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	84 bb       	out	0x14, r24	; 20
PORTC|=(1<<6);                                    //подтягиваем к 5V
 59e:	85 b3       	in	r24, 0x15	; 21
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	85 bb       	out	0x15, r24	; 21
 5a4:	08 95       	ret

000005a6 <__vector_11>:
}


ISR (TIMER0_OVF_vect)
{
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
count++;
 5b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <count>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <count>
if (count == 0){                                  //если счетчик переполнился и принял значение 0
 5be:	81 11       	cpse	r24, r1
 5c0:	36 c0       	rjmp	.+108    	; 0x62e <__vector_11+0x88>
        
        led1_b   = led1;                           //сохранием значения скважности в буфер всех 8 свет-ов, макета, потолка и пола
 5c2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
 5c6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <led1_b>
        led2_b   = led2; 
 5ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 5ce:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <led2_b>
        led3_b   = led3;
 5d2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 5d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <led3_b>
		led4_b   = led4;
 5da:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 5de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <led4_b>
		led5_b   = led5;
 5e2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 5e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <led5_b>
		led6_b   = led6;
 5ea:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 5ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <led6_b>
		led7_b   = led7;
 5f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 5f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <led7_b>
		led8_b   = led8;
 5fa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 5fe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <led8_b>
		flrDV_b  = flrDV;
 602:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flrDV>
 606:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <flrDV_b>
		statDV_b = statDV;
 60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <statDV>
 60e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <statDV_b>
		roof_b   = roof;
 612:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 616:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <roof_b>
		flor_b   = flor;
 61a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
 61e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flor_b>
		house_b  = house;
 622:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 626:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <house_b>
		
       PORTA=0b00000000;                          //ставим пины портов A и D в нули 
 62a:	1b ba       	out	0x1b, r1	; 27
       PORTD=0b00000000;                          //
 62c:	12 ba       	out	0x12, r1	; 18
        }

if ((led1_b == count)   && (led1_b!=255))  { PORTD|=(1<<1);}             //по достижении заданной скважности выводим логическую 1 в пин 
 62e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <led1_b>
 632:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 636:	89 13       	cpse	r24, r25
 638:	05 c0       	rjmp	.+10     	; 0x644 <__vector_11+0x9e>
 63a:	8f 3f       	cpi	r24, 0xFF	; 255
 63c:	19 f0       	breq	.+6      	; 0x644 <__vector_11+0x9e>
 63e:	82 b3       	in	r24, 0x12	; 18
 640:	82 60       	ori	r24, 0x02	; 2
 642:	82 bb       	out	0x12, r24	; 18
if ((led2_b == count)   && (led2_b!=255))  { PORTD|=(1<<3);}
 644:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <led2_b>
 648:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 64c:	89 13       	cpse	r24, r25
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__vector_11+0xb4>
 650:	8f 3f       	cpi	r24, 0xFF	; 255
 652:	19 f0       	breq	.+6      	; 0x65a <__vector_11+0xb4>
 654:	82 b3       	in	r24, 0x12	; 18
 656:	88 60       	ori	r24, 0x08	; 8
 658:	82 bb       	out	0x12, r24	; 18
if ((led3_b == count)   && (led3_b!=255))  { PORTA|=(1<<5);}
 65a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <led3_b>
 65e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 662:	89 13       	cpse	r24, r25
 664:	05 c0       	rjmp	.+10     	; 0x670 <__vector_11+0xca>
 666:	8f 3f       	cpi	r24, 0xFF	; 255
 668:	19 f0       	breq	.+6      	; 0x670 <__vector_11+0xca>
 66a:	8b b3       	in	r24, 0x1b	; 27
 66c:	80 62       	ori	r24, 0x20	; 32
 66e:	8b bb       	out	0x1b, r24	; 27
if ((led4_b == count)   && (led4_b!=255))  { PORTA|=(1<<4);}
 670:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <led4_b>
 674:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 678:	89 13       	cpse	r24, r25
 67a:	05 c0       	rjmp	.+10     	; 0x686 <__vector_11+0xe0>
 67c:	8f 3f       	cpi	r24, 0xFF	; 255
 67e:	19 f0       	breq	.+6      	; 0x686 <__vector_11+0xe0>
 680:	8b b3       	in	r24, 0x1b	; 27
 682:	80 61       	ori	r24, 0x10	; 16
 684:	8b bb       	out	0x1b, r24	; 27
if ((led5_b == count)   && (led5_b!=255))  { PORTA|=(1<<1);}
 686:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <led5_b>
 68a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 68e:	89 13       	cpse	r24, r25
 690:	05 c0       	rjmp	.+10     	; 0x69c <__vector_11+0xf6>
 692:	8f 3f       	cpi	r24, 0xFF	; 255
 694:	19 f0       	breq	.+6      	; 0x69c <__vector_11+0xf6>
 696:	8b b3       	in	r24, 0x1b	; 27
 698:	82 60       	ori	r24, 0x02	; 2
 69a:	8b bb       	out	0x1b, r24	; 27
if ((led6_b == count)   && (led6_b!=255))  { PORTA|=(1<<2);}
 69c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <led6_b>
 6a0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 6a4:	89 13       	cpse	r24, r25
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__vector_11+0x10c>
 6a8:	8f 3f       	cpi	r24, 0xFF	; 255
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <__vector_11+0x10c>
 6ac:	8b b3       	in	r24, 0x1b	; 27
 6ae:	84 60       	ori	r24, 0x04	; 4
 6b0:	8b bb       	out	0x1b, r24	; 27
if ((led7_b == count)   && (led7_b!=255))  { PORTA|=(1<<3);}
 6b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <led7_b>
 6b6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 6ba:	89 13       	cpse	r24, r25
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__vector_11+0x122>
 6be:	8f 3f       	cpi	r24, 0xFF	; 255
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <__vector_11+0x122>
 6c2:	8b b3       	in	r24, 0x1b	; 27
 6c4:	88 60       	ori	r24, 0x08	; 8
 6c6:	8b bb       	out	0x1b, r24	; 27
if ((led8_b == count)   && (led8_b!=255))  { PORTA|=(1<<0);}
 6c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <led8_b>
 6cc:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 6d0:	89 13       	cpse	r24, r25
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__vector_11+0x138>
 6d4:	8f 3f       	cpi	r24, 0xFF	; 255
 6d6:	19 f0       	breq	.+6      	; 0x6de <__vector_11+0x138>
 6d8:	8b b3       	in	r24, 0x1b	; 27
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	8b bb       	out	0x1b, r24	; 27
if ((flrDV_b == count)  && (flrDV_b!=255)) { PORTD|=(1<<0);}
 6de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flrDV_b>
 6e2:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 6e6:	89 13       	cpse	r24, r25
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <__vector_11+0x14e>
 6ea:	8f 3f       	cpi	r24, 0xFF	; 255
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <__vector_11+0x14e>
 6ee:	82 b3       	in	r24, 0x12	; 18
 6f0:	81 60       	ori	r24, 0x01	; 1
 6f2:	82 bb       	out	0x12, r24	; 18
if ((statDV_b == count) && (statDV_b!=255)){ PORTD|=(1<<5);}
 6f4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <statDV_b>
 6f8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 6fc:	89 13       	cpse	r24, r25
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <__vector_11+0x164>
 700:	8f 3f       	cpi	r24, 0xFF	; 255
 702:	19 f0       	breq	.+6      	; 0x70a <__vector_11+0x164>
 704:	82 b3       	in	r24, 0x12	; 18
 706:	80 62       	ori	r24, 0x20	; 32
 708:	82 bb       	out	0x12, r24	; 18
if ((roof_b == count)   && (roof_b!=255))  { PORTD|=(1<<2);}
 70a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <roof_b>
 70e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 712:	89 13       	cpse	r24, r25
 714:	05 c0       	rjmp	.+10     	; 0x720 <__vector_11+0x17a>
 716:	8f 3f       	cpi	r24, 0xFF	; 255
 718:	19 f0       	breq	.+6      	; 0x720 <__vector_11+0x17a>
 71a:	82 b3       	in	r24, 0x12	; 18
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	82 bb       	out	0x12, r24	; 18
if ((flor_b == count)   && (flor_b!=255))  { PORTD|=(1<<4);}
 720:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <flor_b>
 724:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 728:	89 13       	cpse	r24, r25
 72a:	05 c0       	rjmp	.+10     	; 0x736 <__vector_11+0x190>
 72c:	8f 3f       	cpi	r24, 0xFF	; 255
 72e:	19 f0       	breq	.+6      	; 0x736 <__vector_11+0x190>
 730:	82 b3       	in	r24, 0x12	; 18
 732:	80 61       	ori	r24, 0x10	; 16
 734:	82 bb       	out	0x12, r24	; 18
if ((house_b == count)  && (house_b!=255)) { PORTA|=(1<<7);}
 736:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <house_b>
 73a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count>
 73e:	89 13       	cpse	r24, r25
 740:	05 c0       	rjmp	.+10     	; 0x74c <__vector_11+0x1a6>
 742:	8f 3f       	cpi	r24, 0xFF	; 255
 744:	19 f0       	breq	.+6      	; 0x74c <__vector_11+0x1a6>
 746:	8b b3       	in	r24, 0x1b	; 27
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	8b bb       	out	0x1b, r24	; 27
}
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <main>:



int main(void) {
  initial_ports();                     //инициализируем порты
 75a:	0e 94 c2 02 	call	0x584	; 0x584 <initial_ports>

  TIMSK &= ~(1 << TOIE0);              // включить прерывание по переполнению таймера
 75e:	89 b7       	in	r24, 0x39	; 57
 760:	8e 7f       	andi	r24, 0xFE	; 254
 762:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= (1 << CS00);                // настройка таймера, предделитель выкл
 764:	83 b7       	in	r24, 0x33	; 51
 766:	81 60       	ori	r24, 0x01	; 1
 768:	83 bf       	out	0x33, r24	; 51
  sei();
 76a:	78 94       	sei
  PORTC|=(1<<7);
 76c:	85 b3       	in	r24, 0x15	; 21
 76e:	80 68       	ori	r24, 0x80	; 128
 770:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 772:	2f ef       	ldi	r18, 0xFF	; 255
 774:	89 e6       	ldi	r24, 0x69	; 105
 776:	98 e1       	ldi	r25, 0x18	; 24
 778:	21 50       	subi	r18, 0x01	; 1
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x1e>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x28>
 782:	00 00       	nop
 _delay_ms(1000);
  while (1)
  {
    if (!(PINC & (1 << 6))) {    //проверяем кнопку на лог. ноль
 784:	9e 99       	sbic	0x13, 6	; 19
 786:	08 c0       	rjmp	.+16     	; 0x798 <main+0x3e>
      TIMSK |= (1 << TOIE0);      //разрешаем прерывания попереполнению
 788:	89 b7       	in	r24, 0x39	; 57
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	89 bf       	out	0x39, r24	; 57
      skvazhnost();               //выполняем цикл
 78e:	0e 94 49 00 	call	0x92	; 0x92 <skvazhnost>
      TIMSK &= ~(1 << TOIE0);     //запрещаем прерывания по переполнению
 792:	89 b7       	in	r24, 0x39	; 57
 794:	8e 7f       	andi	r24, 0xFE	; 254
 796:	89 bf       	out	0x39, r24	; 57
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	84 e3       	ldi	r24, 0x34	; 52
 79c:	9c e0       	ldi	r25, 0x0C	; 12
 79e:	21 50       	subi	r18, 0x01	; 1
 7a0:	80 40       	sbci	r24, 0x00	; 0
 7a2:	90 40       	sbci	r25, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x44>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x4e>
 7a8:	00 00       	nop
 7aa:	ec cf       	rjmp	.-40     	; 0x784 <main+0x2a>

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
