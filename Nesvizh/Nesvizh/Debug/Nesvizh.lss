
Nesvizh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006c  0080006c  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e21  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a16  00000000  00000000  00001d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000274c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000721  00000000  00000000  00002ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000032ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 03 	call	0x772	; 0x772 <main>
  8a:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <skvazhnost>:
uint8_t temp=1;                                                                                                         //для смены светодиодов


void skvazhnost() {                                                                             //функция для задания скважности подсветки
while(1){		  
	if (temp==1)  {if (n    < 255)   {if(flor < 150) flor+=1; if(roof < 130) roof+=1; _delay_us(6600); n++;}    //плавно гасится пол на 60% и потолок на 70%                                 
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	09 f5       	brne	.+66     	; 0xdc <skvazhnost+0x4a>
  9a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <n>
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	d1 f0       	breq	.+52     	; 0xd6 <skvazhnost+0x44>
  a2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
  a6:	86 39       	cpi	r24, 0x96	; 150
  a8:	18 f4       	brcc	.+6      	; 0xb0 <skvazhnost+0x1e>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
  b0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  b4:	82 38       	cpi	r24, 0x82	; 130
  b6:	18 f4       	brcc	.+6      	; 0xbe <skvazhnost+0x2c>
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e8       	ldi	r24, 0x8F	; 143
  c0:	93 e3       	ldi	r25, 0x33	; 51
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <skvazhnost+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <skvazhnost+0x36>
  c8:	00 00       	nop
  ca:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <n>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <n>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <skvazhnost+0x4a>
		else temp = 2;}                                                                                          //переход к следующему светодиоду
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==2)  {if (led1 >   0)   {led1 -= 1;  if(flor<255) flor+=1; if(roof<170) roof+=2; if((roof>=170) && (roof<255)) roof+=1; _delay_us(3400); }  //гасим плавно пол и потолок, зажигая первый светодод. P.S. два if для потолока используется для одновременного погашения потолка и пола
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	41 f5       	brne	.+80     	; 0x134 <skvazhnost+0xa2>
  e4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
  e8:	88 23       	and	r24, r24
  ea:	09 f1       	breq	.+66     	; 0x12e <skvazhnost+0x9c>
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <led1>
  f2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	19 f0       	breq	.+6      	; 0x100 <skvazhnost+0x6e>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
 100:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 104:	8a 3a       	cpi	r24, 0xAA	; 170
 106:	18 f4       	brcc	.+6      	; 0x10e <skvazhnost+0x7c>
 108:	8e 5f       	subi	r24, 0xFE	; 254
 10a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 10e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 112:	96 e5       	ldi	r25, 0x56	; 86
 114:	98 0f       	add	r25, r24
 116:	95 35       	cpi	r25, 0x55	; 85
 118:	18 f4       	brcc	.+6      	; 0x120 <skvazhnost+0x8e>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 120:	8f e8       	ldi	r24, 0x8F	; 143
 122:	9a e1       	ldi	r25, 0x1A	; 26
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <skvazhnost+0x92>
 128:	00 c0       	rjmp	.+0      	; 0x12a <skvazhnost+0x98>
 12a:	00 00       	nop
 12c:	03 c0       	rjmp	.+6      	; 0x134 <skvazhnost+0xa2>
		else temp = 3; }                                                                         //переход к следующему светодиоду	                                           	
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==3)  {if (led1 < 255)   {led1 += 1;  if(led1>100) led2 -=1; _delay_us(3400);}       //далее постепенное зажигание и погашение 8 светодиодов внахлест                                                    
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	c1 f4       	brne	.+48     	; 0x16c <skvazhnost+0xda>
 13c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	89 f0       	breq	.+34     	; 0x166 <skvazhnost+0xd4>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <led1>
 14a:	85 36       	cpi	r24, 0x65	; 101
 14c:	28 f0       	brcs	.+10     	; 0x158 <skvazhnost+0xc6>
 14e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 152:	81 50       	subi	r24, 0x01	; 1
 154:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 158:	8f e8       	ldi	r24, 0x8F	; 143
 15a:	9a e1       	ldi	r25, 0x1A	; 26
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <skvazhnost+0xca>
 160:	00 c0       	rjmp	.+0      	; 0x162 <skvazhnost+0xd0>
 162:	00 00       	nop
 164:	03 c0       	rjmp	.+6      	; 0x16c <skvazhnost+0xda>
		else temp = 4;}                                                                          //        
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==4)  {if (led2 >   0)   {led2 -= 1; _delay_us(3400);}                               //                                                        
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	89 f4       	brne	.+34     	; 0x196 <skvazhnost+0x104>
 174:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 178:	88 23       	and	r24, r24
 17a:	51 f0       	breq	.+20     	; 0x190 <skvazhnost+0xfe>
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	9a e1       	ldi	r25, 0x1A	; 26
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <skvazhnost+0xf4>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <skvazhnost+0xfa>
 18c:	00 00       	nop
 18e:	03 c0       	rjmp	.+6      	; 0x196 <skvazhnost+0x104>
		else temp = 5; }                                                                         //
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==5)  {if (led2 < 255)   {led2 += 1;  if(led2>100) led3 -=1; _delay_us(3400);}       //
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	c1 f4       	brne	.+48     	; 0x1ce <skvazhnost+0x13c>
 19e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 1a2:	8f 3f       	cpi	r24, 0xFF	; 255
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <skvazhnost+0x136>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <led2>
 1ac:	85 36       	cpi	r24, 0x65	; 101
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <skvazhnost+0x128>
 1b0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 1ba:	8f e8       	ldi	r24, 0x8F	; 143
 1bc:	9a e1       	ldi	r25, 0x1A	; 26
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <skvazhnost+0x12c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <skvazhnost+0x132>
 1c4:	00 00       	nop
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <skvazhnost+0x13c>
		else temp = 6; }                                                                         // 
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==6)  {if (led3 >   0)   {led3 -= 1; _delay_us(3400);}                               //
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	86 30       	cpi	r24, 0x06	; 6
 1d4:	89 f4       	brne	.+34     	; 0x1f8 <skvazhnost+0x166>
 1d6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 1da:	88 23       	and	r24, r24
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <skvazhnost+0x160>
 1de:	81 50       	subi	r24, 0x01	; 1
 1e0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 1e4:	8f e8       	ldi	r24, 0x8F	; 143
 1e6:	9a e1       	ldi	r25, 0x1A	; 26
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <skvazhnost+0x156>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <skvazhnost+0x15c>
 1ee:	00 00       	nop
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <skvazhnost+0x166>
		else temp = 7; }                                                                         //
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==7)  {if (led3 < 255)   {led3 += 1;  if(led3>100) led4 -=1; _delay_us(3400);}       //
 1f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fc:	87 30       	cpi	r24, 0x07	; 7
 1fe:	c1 f4       	brne	.+48     	; 0x230 <skvazhnost+0x19e>
 200:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 204:	8f 3f       	cpi	r24, 0xFF	; 255
 206:	89 f0       	breq	.+34     	; 0x22a <skvazhnost+0x198>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <led3>
 20e:	85 36       	cpi	r24, 0x65	; 101
 210:	28 f0       	brcs	.+10     	; 0x21c <skvazhnost+0x18a>
 212:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 216:	81 50       	subi	r24, 0x01	; 1
 218:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 21c:	8f e8       	ldi	r24, 0x8F	; 143
 21e:	9a e1       	ldi	r25, 0x1A	; 26
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <skvazhnost+0x18e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <skvazhnost+0x194>
 226:	00 00       	nop
 228:	03 c0       	rjmp	.+6      	; 0x230 <skvazhnost+0x19e>
		else temp = 8; }                                                                         //
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==8)  {if (led4 >   0)   {led4 -= 1; _delay_us(3400);}                               //
 230:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	89 f4       	brne	.+34     	; 0x25a <skvazhnost+0x1c8>
 238:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 23c:	88 23       	and	r24, r24
 23e:	51 f0       	breq	.+20     	; 0x254 <skvazhnost+0x1c2>
 240:	81 50       	subi	r24, 0x01	; 1
 242:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 246:	8f e8       	ldi	r24, 0x8F	; 143
 248:	9a e1       	ldi	r25, 0x1A	; 26
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <skvazhnost+0x1b8>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <skvazhnost+0x1be>
 250:	00 00       	nop
 252:	03 c0       	rjmp	.+6      	; 0x25a <skvazhnost+0x1c8>
		else temp = 9; }	                                                                     //
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==9)  {if (led4 < 255)   {led4 += 1;  if(led4>100) led5 -=1; _delay_us(3400);}       //
 25a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 25e:	89 30       	cpi	r24, 0x09	; 9
 260:	c1 f4       	brne	.+48     	; 0x292 <skvazhnost+0x200>
 262:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 266:	8f 3f       	cpi	r24, 0xFF	; 255
 268:	89 f0       	breq	.+34     	; 0x28c <skvazhnost+0x1fa>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led4>
 270:	85 36       	cpi	r24, 0x65	; 101
 272:	28 f0       	brcs	.+10     	; 0x27e <skvazhnost+0x1ec>
 274:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
 27e:	8f e8       	ldi	r24, 0x8F	; 143
 280:	9a e1       	ldi	r25, 0x1A	; 26
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <skvazhnost+0x1f0>
 286:	00 c0       	rjmp	.+0      	; 0x288 <skvazhnost+0x1f6>
 288:	00 00       	nop
 28a:	03 c0       	rjmp	.+6      	; 0x292 <skvazhnost+0x200>
		else temp = 10; }                                                                        //
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==10) {if (led5 >   0)   {led5 -= 1; _delay_us(3400);}                               // 
 292:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 296:	8a 30       	cpi	r24, 0x0A	; 10
 298:	89 f4       	brne	.+34     	; 0x2bc <skvazhnost+0x22a>
 29a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 29e:	88 23       	and	r24, r24
 2a0:	51 f0       	breq	.+20     	; 0x2b6 <skvazhnost+0x224>
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
 2a8:	8f e8       	ldi	r24, 0x8F	; 143
 2aa:	9a e1       	ldi	r25, 0x1A	; 26
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <skvazhnost+0x21a>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <skvazhnost+0x220>
 2b2:	00 00       	nop
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <skvazhnost+0x22a>
		else temp = 11;}                                                                         //
 2b6:	8b e0       	ldi	r24, 0x0B	; 11
 2b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==11) {if (led5 < 255)   {led5 += 1;  if(led5>100) house -=1; _delay_us(3400);}      //
 2bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c0:	8b 30       	cpi	r24, 0x0B	; 11
 2c2:	c1 f4       	brne	.+48     	; 0x2f4 <skvazhnost+0x262>
 2c4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 2c8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ca:	89 f0       	breq	.+34     	; 0x2ee <skvazhnost+0x25c>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <led5>
 2d2:	85 36       	cpi	r24, 0x65	; 101
 2d4:	28 f0       	brcs	.+10     	; 0x2e0 <skvazhnost+0x24e>
 2d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 2e0:	8f e8       	ldi	r24, 0x8F	; 143
 2e2:	9a e1       	ldi	r25, 0x1A	; 26
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <skvazhnost+0x252>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <skvazhnost+0x258>
 2ea:	00 00       	nop
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <skvazhnost+0x262>
		else temp = 12;}                                                                         //
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==12) {if (house >   0)  {house -= 1; _delay_us(3400);}                              //
 2f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f8:	8c 30       	cpi	r24, 0x0C	; 12
 2fa:	d1 f4       	brne	.+52     	; 0x330 <skvazhnost+0x29e>
 2fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 300:	88 23       	and	r24, r24
 302:	51 f0       	breq	.+20     	; 0x318 <skvazhnost+0x286>
 304:	81 50       	subi	r24, 0x01	; 1
 306:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 30a:	8f e8       	ldi	r24, 0x8F	; 143
 30c:	9a e1       	ldi	r25, 0x1A	; 26
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <skvazhnost+0x27c>
 312:	00 c0       	rjmp	.+0      	; 0x314 <skvazhnost+0x282>
 314:	00 00       	nop
 316:	0c c0       	rjmp	.+24     	; 0x330 <skvazhnost+0x29e>
		else {temp = 13; _delay_ms(4000);}}                                           	
 318:	8d e0       	ldi	r24, 0x0D	; 13
 31a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	27 ea       	ldi	r18, 0xA7	; 167
 322:	81 e6       	ldi	r24, 0x61	; 97
 324:	91 50       	subi	r25, 0x01	; 1
 326:	20 40       	sbci	r18, 0x00	; 0
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <skvazhnost+0x292>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <skvazhnost+0x29c>
 32e:	00 00       	nop
	if (temp==13) {if (house < 255)  {house += 1;  if(house>100) led6 -=1; _delay_us(3400);}     //
 330:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	8d 30       	cpi	r24, 0x0D	; 13
 336:	c1 f4       	brne	.+48     	; 0x368 <skvazhnost+0x2d6>
 338:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 33c:	8f 3f       	cpi	r24, 0xFF	; 255
 33e:	89 f0       	breq	.+34     	; 0x362 <skvazhnost+0x2d0>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <house>
 346:	85 36       	cpi	r24, 0x65	; 101
 348:	28 f0       	brcs	.+10     	; 0x354 <skvazhnost+0x2c2>
 34a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	8f e8       	ldi	r24, 0x8F	; 143
 356:	9a e1       	ldi	r25, 0x1A	; 26
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <skvazhnost+0x2c6>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <skvazhnost+0x2cc>
 35e:	00 00       	nop
 360:	03 c0       	rjmp	.+6      	; 0x368 <skvazhnost+0x2d6>
		else temp = 14;}	                                                                     //
 362:	8e e0       	ldi	r24, 0x0E	; 14
 364:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==14) {if (led6 >   0)   {led6 -= 1; _delay_us(3400);}                               //
 368:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36c:	8e 30       	cpi	r24, 0x0E	; 14
 36e:	89 f4       	brne	.+34     	; 0x392 <skvazhnost+0x300>
 370:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 374:	88 23       	and	r24, r24
 376:	51 f0       	breq	.+20     	; 0x38c <skvazhnost+0x2fa>
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
 37e:	8f e8       	ldi	r24, 0x8F	; 143
 380:	9a e1       	ldi	r25, 0x1A	; 26
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <skvazhnost+0x2f0>
 386:	00 c0       	rjmp	.+0      	; 0x388 <skvazhnost+0x2f6>
 388:	00 00       	nop
 38a:	03 c0       	rjmp	.+6      	; 0x392 <skvazhnost+0x300>
		else temp = 15;}    
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==15) {if (led6 < 255)   {led6 += 1;  if(led6>100) led7 -=1; _delay_us(3400);}       //
 392:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 396:	8f 30       	cpi	r24, 0x0F	; 15
 398:	c1 f4       	brne	.+48     	; 0x3ca <skvazhnost+0x338>
 39a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	89 f0       	breq	.+34     	; 0x3c4 <skvazhnost+0x332>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <led6>
 3a8:	85 36       	cpi	r24, 0x65	; 101
 3aa:	28 f0       	brcs	.+10     	; 0x3b6 <skvazhnost+0x324>
 3ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 3b0:	81 50       	subi	r24, 0x01	; 1
 3b2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 3b6:	8f e8       	ldi	r24, 0x8F	; 143
 3b8:	9a e1       	ldi	r25, 0x1A	; 26
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <skvazhnost+0x328>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <skvazhnost+0x32e>
 3c0:	00 00       	nop
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <skvazhnost+0x338>
		else temp = 16;}	                                                                     //
 3c4:	80 e1       	ldi	r24, 0x10	; 16
 3c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==16) {if (led7 >   0)   {led7 -= 1; _delay_us(3400);}                               //
 3ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ce:	80 31       	cpi	r24, 0x10	; 16
 3d0:	89 f4       	brne	.+34     	; 0x3f4 <skvazhnost+0x362>
 3d2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 3d6:	88 23       	and	r24, r24
 3d8:	51 f0       	breq	.+20     	; 0x3ee <skvazhnost+0x35c>
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 3e0:	8f e8       	ldi	r24, 0x8F	; 143
 3e2:	9a e1       	ldi	r25, 0x1A	; 26
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <skvazhnost+0x352>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <skvazhnost+0x358>
 3ea:	00 00       	nop
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <skvazhnost+0x362>
		else temp = 17;}                                                                         //
 3ee:	81 e1       	ldi	r24, 0x11	; 17
 3f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==17) {if (led7 < 255)   {led7 += 1;  if(led7>100) led8 -=1; _delay_us(3400);}       //
 3f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f8:	81 31       	cpi	r24, 0x11	; 17
 3fa:	c1 f4       	brne	.+48     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 400:	8f 3f       	cpi	r24, 0xFF	; 255
 402:	89 f0       	breq	.+34     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <led7>
 40a:	85 36       	cpi	r24, 0x65	; 101
 40c:	28 f0       	brcs	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 412:	81 50       	subi	r24, 0x01	; 1
 414:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 418:	8f e8       	ldi	r24, 0x8F	; 143
 41a:	9a e1       	ldi	r25, 0x1A	; 26
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	03 c0       	rjmp	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		else temp = 18;}                                                                         //
 426:	82 e1       	ldi	r24, 0x12	; 18
 428:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==18) {if (led8 >   0)   {led8 -= 1; _delay_us(3400);}                               //
 42c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 430:	82 31       	cpi	r24, 0x12	; 18
 432:	89 f4       	brne	.+34     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 434:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 438:	88 23       	and	r24, r24
 43a:	51 f0       	breq	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 442:	8f e8       	ldi	r24, 0x8F	; 143
 444:	9a e1       	ldi	r25, 0x1A	; 26
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	03 c0       	rjmp	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		else temp = 19;} 	
 450:	83 e1       	ldi	r24, 0x13	; 19
 452:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==19) {if (led8 < 255)   {led8 += 1;  if(led8>100) led9 -=1; _delay_us(3400);}       //
 456:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 45a:	83 31       	cpi	r24, 0x13	; 19
 45c:	c1 f4       	brne	.+48     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 45e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 462:	8f 3f       	cpi	r24, 0xFF	; 255
 464:	89 f0       	breq	.+34     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led8>
 46c:	85 36       	cpi	r24, 0x65	; 101
 46e:	28 f0       	brcs	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 470:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led9>
 474:	81 50       	subi	r24, 0x01	; 1
 476:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led9>
 47a:	8f e8       	ldi	r24, 0x8F	; 143
 47c:	9a e1       	ldi	r25, 0x1A	; 26
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	03 c0       	rjmp	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		else temp = 20;}                                                                         //
 488:	84 e1       	ldi	r24, 0x14	; 20
 48a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==20) {if (led9 >   0)   {led9 -= 1; _delay_us(3400);}                               //
 48e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 492:	84 31       	cpi	r24, 0x14	; 20
 494:	89 f4       	brne	.+34     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 496:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led9>
 49a:	88 23       	and	r24, r24
 49c:	51 f0       	breq	.+20     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 49e:	81 50       	subi	r24, 0x01	; 1
 4a0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led9>
 4a4:	8f e8       	ldi	r24, 0x8F	; 143
 4a6:	9a e1       	ldi	r25, 0x1A	; 26
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		else temp = 21;}     
 4b2:	85 e1       	ldi	r24, 0x15	; 21
 4b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==21) {if (led9 < 255)   {led9 += 1;  if(led9>100) led10 -=1; _delay_us(3400);}      //
 4b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4bc:	85 31       	cpi	r24, 0x15	; 21
 4be:	c1 f4       	brne	.+48     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4c0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led9>
 4c4:	8f 3f       	cpi	r24, 0xFF	; 255
 4c6:	89 f0       	breq	.+34     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led9>
 4ce:	85 36       	cpi	r24, 0x65	; 101
 4d0:	28 f0       	brcs	.+10     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led10>
 4d6:	81 50       	subi	r24, 0x01	; 1
 4d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led10>
 4dc:	8f e8       	ldi	r24, 0x8F	; 143
 4de:	9a e1       	ldi	r25, 0x1A	; 26
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		else temp = 22;}                                                                         //
 4ea:	86 e1       	ldi	r24, 0x16	; 22
 4ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==22) {if (led10 >   0)   {led10 -= 1; _delay_us(3400);}                             //
 4f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4f4:	86 31       	cpi	r24, 0x16	; 22
 4f6:	89 f4       	brne	.+34     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 4f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led10>
 4fc:	88 23       	and	r24, r24
 4fe:	51 f0       	breq	.+20     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 500:	81 50       	subi	r24, 0x01	; 1
 502:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led10>
 506:	8f e8       	ldi	r24, 0x8F	; 143
 508:	9a e1       	ldi	r25, 0x1A	; 26
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 510:	00 00       	nop
 512:	03 c0       	rjmp	.+6      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
		else temp = 23;}  	                                                                     //
 514:	87 e1       	ldi	r24, 0x17	; 23
 516:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==23) {if (led10 < 255)   {led10 += 1;  if((roof > 130) && (led10 > 125)) roof -=1; _delay_us(3400);}       //плавно зажигаем потолок на 70%
 51a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 51e:	87 31       	cpi	r24, 0x17	; 23
 520:	d1 f4       	brne	.+52     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 522:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led10>
 526:	8f 3f       	cpi	r24, 0xFF	; 255
 528:	99 f0       	breq	.+38     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led10>
 530:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
 534:	93 38       	cpi	r25, 0x83	; 131
 536:	28 f0       	brcs	.+10     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 538:	8e 37       	cpi	r24, 0x7E	; 126
 53a:	18 f0       	brcs	.+6      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__data_end>
 542:	8f e8       	ldi	r24, 0x8F	; 143
 544:	9a e1       	ldi	r25, 0x1A	; 26
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
 54e:	03 c0       	rjmp	.+6      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
		else temp = 24;}	                                                                     //
 550:	88 e1       	ldi	r24, 0x18	; 24
 552:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (temp==24) {if (flor >   0)   {flor -= 1;  if(roof>0) roof -=1; _delay_us(6600);}         //плавно зажигаем пол и потолок на 100%
 556:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 55a:	88 31       	cpi	r24, 0x18	; 24
 55c:	09 f0       	breq	.+2      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 55e:	99 cd       	rjmp	.-1230   	; 0x92 <skvazhnost>
 560:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
 564:	88 23       	and	r24, r24
 566:	89 f0       	breq	.+34     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 568:	81 50       	subi	r24, 0x01	; 1
 56a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flor>
 56e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 572:	88 23       	and	r24, r24
 574:	19 f0       	breq	.+6      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 576:	81 50       	subi	r24, 0x01	; 1
 578:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 57c:	8f e8       	ldi	r24, 0x8F	; 143
 57e:	93 e3       	ldi	r25, 0x33	; 51
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 584:	00 c0       	rjmp	.+0      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 586:	00 00       	nop
 588:	84 cd       	rjmp	.-1272   	; 0x92 <skvazhnost>
		else {temp = 1; n=0; return;}}		                                                     //возвращаем параметры на исходные и заканчиваем функцию
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 590:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <n>
 594:	08 95       	ret

00000596 <initial_ports>:
		}
	}
	
void initial_ports() {
DDRA=0xFF;                     //подключаем порт A
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	8a bb       	out	0x1a, r24	; 26
PORTA=0;
 59a:	1b ba       	out	0x1b, r1	; 27

DDRD=0xFF;                     //подключаем порт D
 59c:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<3) | (1<<4);
 59e:	82 b3       	in	r24, 0x12	; 18
 5a0:	88 61       	ori	r24, 0x18	; 24
 5a2:	82 bb       	out	0x12, r24	; 18

DDRC&=~(1<<6);       DDRC&=~(1<<7);                //подключаем порт С на кнопку 
 5a4:	84 b3       	in	r24, 0x14	; 20
 5a6:	8f 7b       	andi	r24, 0xBF	; 191
 5a8:	84 bb       	out	0x14, r24	; 20
 5aa:	84 b3       	in	r24, 0x14	; 20
 5ac:	8f 77       	andi	r24, 0x7F	; 127
 5ae:	84 bb       	out	0x14, r24	; 20
PORTC|=(1<<6);       PORTC|=(1<<7);                //подтягиваем к 5V
 5b0:	85 b3       	in	r24, 0x15	; 21
 5b2:	80 64       	ori	r24, 0x40	; 64
 5b4:	85 bb       	out	0x15, r24	; 21
 5b6:	85 b3       	in	r24, 0x15	; 21
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret

000005be <__vector_11>:
}


ISR (TIMER0_OVF_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
count++;
 5cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count>
 5d0:	8f 5f       	subi	r24, 0xFF	; 255
 5d2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count>
if (count == 0){                                  //если счетчик переполнился и принял значение 0
 5d6:	81 11       	cpse	r24, r1
 5d8:	36 c0       	rjmp	.+108    	; 0x646 <__vector_11+0x88>
        
        led1_b   = led1;                           //сохранием значения скважности в буфер всех 8 свет-ов, макета, потолка и пола
 5da:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <led1>
 5de:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <led1_b>
        led2_b   = led2; 
 5e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <led2>
 5e6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <led2_b>
        led3_b   = led3;
 5ea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <led3>
 5ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <led3_b>
		led4_b   = led4;
 5f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led4>
 5f6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <led4_b>
		led5_b   = led5;
 5fa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <led5>
 5fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <led5_b>
		led6_b   = led6;
 602:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <led6>
 606:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <led6_b>
		led7_b   = led7;
 60a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led7>
 60e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <led7_b>
		led8_b   = led8;
 612:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led8>
 616:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <led8_b>
		led9_b   = led9;
 61a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led9>
 61e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <led9_b>
		led10_b  = led10;
 622:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led10>
 626:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <led10_b>
		roof_b   = roof;
 62a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 62e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <roof_b>
		flor_b   = flor;
 632:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flor>
 636:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <flor_b>
		house_b  = house;
 63a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <house>
 63e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <house_b>
		
       PORTA=0b00000000;                          //ставим пины портов A и D в нули 
 642:	1b ba       	out	0x1b, r1	; 27
       PORTD=0b00000000;                          //
 644:	12 ba       	out	0x12, r1	; 18
        }

if ((led1_b == count)  && (led1_b!=255))  { PORTA|=(1<<0);}             //по достижении заданной скважности выводим логическую 1 в пин 
 646:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <led1_b>
 64a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 64e:	89 13       	cpse	r24, r25
 650:	05 c0       	rjmp	.+10     	; 0x65c <__vector_11+0x9e>
 652:	8f 3f       	cpi	r24, 0xFF	; 255
 654:	19 f0       	breq	.+6      	; 0x65c <__vector_11+0x9e>
 656:	8b b3       	in	r24, 0x1b	; 27
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	8b bb       	out	0x1b, r24	; 27
if ((led2_b == count)  && (led2_b!=255))  { PORTA|=(1<<1);}
 65c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <led2_b>
 660:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 664:	89 13       	cpse	r24, r25
 666:	05 c0       	rjmp	.+10     	; 0x672 <__vector_11+0xb4>
 668:	8f 3f       	cpi	r24, 0xFF	; 255
 66a:	19 f0       	breq	.+6      	; 0x672 <__vector_11+0xb4>
 66c:	8b b3       	in	r24, 0x1b	; 27
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	8b bb       	out	0x1b, r24	; 27
if ((led3_b == count)  && (led3_b!=255))  { PORTA|=(1<<2);}
 672:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <led3_b>
 676:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 67a:	89 13       	cpse	r24, r25
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__vector_11+0xca>
 67e:	8f 3f       	cpi	r24, 0xFF	; 255
 680:	19 f0       	breq	.+6      	; 0x688 <__vector_11+0xca>
 682:	8b b3       	in	r24, 0x1b	; 27
 684:	84 60       	ori	r24, 0x04	; 4
 686:	8b bb       	out	0x1b, r24	; 27
if ((led4_b == count)  && (led4_b!=255))  { PORTA|=(1<<3);}
 688:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <led4_b>
 68c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 690:	89 13       	cpse	r24, r25
 692:	05 c0       	rjmp	.+10     	; 0x69e <__vector_11+0xe0>
 694:	8f 3f       	cpi	r24, 0xFF	; 255
 696:	19 f0       	breq	.+6      	; 0x69e <__vector_11+0xe0>
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	88 60       	ori	r24, 0x08	; 8
 69c:	8b bb       	out	0x1b, r24	; 27
if ((led5_b == count)  && (led5_b!=255))  { PORTA|=(1<<4);}
 69e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <led5_b>
 6a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 6a6:	89 13       	cpse	r24, r25
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <__vector_11+0xf6>
 6aa:	8f 3f       	cpi	r24, 0xFF	; 255
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <__vector_11+0xf6>
 6ae:	8b b3       	in	r24, 0x1b	; 27
 6b0:	80 61       	ori	r24, 0x10	; 16
 6b2:	8b bb       	out	0x1b, r24	; 27
if ((led6_b == count)  && (led6_b!=255))  { PORTA|=(1<<5);}
 6b4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <led6_b>
 6b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 6bc:	89 13       	cpse	r24, r25
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <__vector_11+0x10c>
 6c0:	8f 3f       	cpi	r24, 0xFF	; 255
 6c2:	19 f0       	breq	.+6      	; 0x6ca <__vector_11+0x10c>
 6c4:	8b b3       	in	r24, 0x1b	; 27
 6c6:	80 62       	ori	r24, 0x20	; 32
 6c8:	8b bb       	out	0x1b, r24	; 27
if ((led7_b == count)  && (led7_b!=255))  { PORTA|=(1<<6);}
 6ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <led7_b>
 6ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 6d2:	89 13       	cpse	r24, r25
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <__vector_11+0x122>
 6d6:	8f 3f       	cpi	r24, 0xFF	; 255
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <__vector_11+0x122>
 6da:	8b b3       	in	r24, 0x1b	; 27
 6dc:	80 64       	ori	r24, 0x40	; 64
 6de:	8b bb       	out	0x1b, r24	; 27
if ((led8_b == count)  && (led8_b!=255))  { PORTA|=(1<<7);}
 6e0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <led8_b>
 6e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 6e8:	89 13       	cpse	r24, r25
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__vector_11+0x138>
 6ec:	8f 3f       	cpi	r24, 0xFF	; 255
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <__vector_11+0x138>
 6f0:	8b b3       	in	r24, 0x1b	; 27
 6f2:	80 68       	ori	r24, 0x80	; 128
 6f4:	8b bb       	out	0x1b, r24	; 27
if ((led9_b == count)  && (led9_b!=255))  { PORTD|=(1<<0);}
 6f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <led9_b>
 6fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 6fe:	89 13       	cpse	r24, r25
 700:	05 c0       	rjmp	.+10     	; 0x70c <__vector_11+0x14e>
 702:	8f 3f       	cpi	r24, 0xFF	; 255
 704:	19 f0       	breq	.+6      	; 0x70c <__vector_11+0x14e>
 706:	82 b3       	in	r24, 0x12	; 18
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	82 bb       	out	0x12, r24	; 18
if ((led10_b == count) && (led10_b!=255)) { PORTD|=(1<<1);}
 70c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <led10_b>
 710:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 714:	89 13       	cpse	r24, r25
 716:	05 c0       	rjmp	.+10     	; 0x722 <__vector_11+0x164>
 718:	8f 3f       	cpi	r24, 0xFF	; 255
 71a:	19 f0       	breq	.+6      	; 0x722 <__vector_11+0x164>
 71c:	82 b3       	in	r24, 0x12	; 18
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	82 bb       	out	0x12, r24	; 18
if ((roof_b == count)  && (roof_b!=255))  { PORTD|=(1<<2);}
 722:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <roof_b>
 726:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 72a:	89 13       	cpse	r24, r25
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_11+0x17a>
 72e:	8f 3f       	cpi	r24, 0xFF	; 255
 730:	19 f0       	breq	.+6      	; 0x738 <__vector_11+0x17a>
 732:	82 b3       	in	r24, 0x12	; 18
 734:	84 60       	ori	r24, 0x04	; 4
 736:	82 bb       	out	0x12, r24	; 18
if ((flor_b == count)  && (flor_b!=255))  { PORTD|=(1<<3);}
 738:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <flor_b>
 73c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 740:	89 13       	cpse	r24, r25
 742:	05 c0       	rjmp	.+10     	; 0x74e <__vector_11+0x190>
 744:	8f 3f       	cpi	r24, 0xFF	; 255
 746:	19 f0       	breq	.+6      	; 0x74e <__vector_11+0x190>
 748:	82 b3       	in	r24, 0x12	; 18
 74a:	88 60       	ori	r24, 0x08	; 8
 74c:	82 bb       	out	0x12, r24	; 18
if ((house_b == count) && (house_b!=255)) { PORTD|=(1<<4);}
 74e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <house_b>
 752:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count>
 756:	89 13       	cpse	r24, r25
 758:	05 c0       	rjmp	.+10     	; 0x764 <__vector_11+0x1a6>
 75a:	8f 3f       	cpi	r24, 0xFF	; 255
 75c:	19 f0       	breq	.+6      	; 0x764 <__vector_11+0x1a6>
 75e:	82 b3       	in	r24, 0x12	; 18
 760:	80 61       	ori	r24, 0x10	; 16
 762:	82 bb       	out	0x12, r24	; 18
}
 764:	9f 91       	pop	r25
 766:	8f 91       	pop	r24
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti

00000772 <main>:



int main(void) {
  initial_ports();                     //инициализируем порты
 772:	0e 94 cb 02 	call	0x596	; 0x596 <initial_ports>

  TIMSK &= ~(1 << TOIE0);              // включить прерывание по переполнению таймера
 776:	89 b7       	in	r24, 0x39	; 57
 778:	8e 7f       	andi	r24, 0xFE	; 254
 77a:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= (1 << CS00);                // настройка таймера, предделитель выкл
 77c:	83 b7       	in	r24, 0x33	; 51
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	83 bf       	out	0x33, r24	; 51
  sei();
 782:	78 94       	sei

  while (1)
  {
    if (PINC & (1 << 7)) {    //проверяем кнопку на лог. ноль
 784:	9f 9b       	sbis	0x13, 7	; 19
 786:	08 c0       	rjmp	.+16     	; 0x798 <main+0x26>
      TIMSK |= (1 << TOIE0);      //разрешаем прерывания попереполнению
 788:	89 b7       	in	r24, 0x39	; 57
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	89 bf       	out	0x39, r24	; 57
      skvazhnost();               //выполняем цикл
 78e:	0e 94 49 00 	call	0x92	; 0x92 <skvazhnost>
      TIMSK &= ~(1 << TOIE0);     //запрещаем прерывания по переполнению
 792:	89 b7       	in	r24, 0x39	; 57
 794:	8e 7f       	andi	r24, 0xFE	; 254
 796:	89 bf       	out	0x39, r24	; 57
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	84 e3       	ldi	r24, 0x34	; 52
 79c:	9c e0       	ldi	r25, 0x0C	; 12
 79e:	21 50       	subi	r18, 0x01	; 1
 7a0:	80 40       	sbci	r24, 0x00	; 0
 7a2:	90 40       	sbci	r25, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x2c>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x36>
 7a8:	00 00       	nop
 7aa:	ec cf       	rjmp	.-40     	; 0x784 <main+0x12>

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
